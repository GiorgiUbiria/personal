---
// Interactive Timeline Component
const timelineData = [
  {
    year: "2021",
    title: "Started Computer Science",
    organization: "International Black Sea University",
    description: "Began my journey in Computer Science, learning fundamentals of programming and software development.",
    type: "education",
    technologies: ["Python", "Java", "Data Structures"]
  },
  {
    year: "2022",
    title: "First Development Role",
    organization: "MS Georgian Partners",
    description: "Built MyServis platform using PHP and jQuery. Created and led a development team.",
    type: "work",
    technologies: ["PHP", "jQuery", "Team Leadership"]
  },
  {
    year: "2022-2023",
    title: "Freelance Web Developer",
    organization: "PR Wave",
    description: "Developed modern portfolio and blog using Astro.js. Achieved 95+ PageSpeed score.",
    type: "work",
    technologies: ["Astro.js", "React", "SEO"]
  },
  {
    year: "2024",
    title: "Full Stack Developer",
    organization: "Giant Auto Import",
    description: "Built car auction tracking platform with Next.js and automated invoice generation.",
    type: "work",
    technologies: ["Next.js", "TypeScript", "API Integration"]
  },
  {
    year: "2024-2025",
    title: "Senior Full Stack Developer",
    organization: "Gorgia",
    description: "Developed enterprise CRM/ERM platform supporting 400+ users with real-time features.",
    type: "work",
    technologies: ["Laravel", "React", "WebSockets", "PostgreSQL"]
  },
  {
    year: "2025",
    title: "Computer Science Graduate",
    organization: "International Black Sea University",
    description: "Graduating with Bachelor's degree in Computer Science with focus on web development.",
    type: "education",
    technologies: ["Machine Learning", "System Design", "Software Engineering"]
  }
];
---

<div class="timeline-container card card-compact card-bordered border border-[oklch(var(--s))] w-full hover:shadow-xl transition-all duration-300 my-4">
  <div class="card-body">
    <h3 class="card-title text-lg font-bold mb-6 flex items-center">
      <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
      </svg>
      Career Journey
    </h3>
    
    <div class="timeline-wrapper relative">
      <!-- Timeline line -->
      <div class="timeline-line absolute left-8 top-0 w-0.5 bg-gradient-to-b from-primary via-secondary to-primary opacity-30"></div>
      
      <div class="timeline-items space-y-6">
        {timelineData.map((item, index) => (
          <div 
            class={`timeline-item flex items-start space-x-4 cursor-pointer transition-all duration-300 hover:transform hover:scale-105 ${item.type === 'work' ? 'work-item' : 'education-item'}`}
            data-index={index}
          >
            <!-- Timeline dot -->
            <div class={`timeline-dot w-4 h-4 rounded-full border-2 flex-shrink-0 mt-2 transition-all duration-300 ${
              item.type === 'work' 
                ? 'bg-primary border-primary shadow-lg shadow-primary/30' 
                : 'bg-secondary border-secondary shadow-lg shadow-secondary/30'
            }`}>
            </div>
            
            <!-- Content -->
            <div class="timeline-content flex-1 pb-6">
              <div class="timeline-card bg-base-100 border border-base-300 rounded-lg p-4 shadow-sm hover:shadow-md transition-all duration-300">
                <div class="flex justify-between items-start mb-2">
                  <div>
                    <h4 class="font-bold text-lg text-base-content">{item.title}</h4>
                    <p class="text-sm text-primary font-medium">{item.organization}</p>
                  </div>
                  <span class={`badge badge-outline text-xs ${
                    item.type === 'work' ? 'badge-primary' : 'badge-secondary'
                  }`}>
                    {item.year}
                  </span>
                </div>
                
                <p class="text-sm text-base-content/80 mb-3 leading-relaxed">
                  {item.description}
                </p>
                
                <div class="flex flex-wrap gap-1">
                  {item.technologies.map((tech) => (
                    <span class="badge badge-sm bg-base-200 text-base-content/70 border-0">
                      {tech}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<script define:vars={{ timelineData }}>
  class InteractiveTimeline {
    constructor() {
      this.items = document.querySelectorAll('.timeline-item');
      this.currentIndex = 0;
      this.init();
    }

    init() {
      this.setupIntersectionObserver();
      this.bindEvents();
      this.animateTimelineLine();
    }

    setupIntersectionObserver() {
      const options = {
        threshold: 0.3,
        rootMargin: '0px 0px -100px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            this.animateItem(entry.target);
          }
        });
      }, options);

      this.items.forEach(item => observer.observe(item));
    }

    bindEvents() {
      this.items.forEach((item, index) => {
        item.addEventListener('click', () => this.selectItem(index));
        item.addEventListener('mouseenter', () => this.highlightItem(item));
        item.addEventListener('mouseleave', () => this.unhighlightItem(item));
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowUp' && this.currentIndex > 0) {
          this.selectItem(this.currentIndex - 1);
          e.preventDefault();
        } else if (e.key === 'ArrowDown' && this.currentIndex < this.items.length - 1) {
          this.selectItem(this.currentIndex + 1);
          e.preventDefault();
        }
      });
    }

    animateItem(item) {
      const dot = item.querySelector('.timeline-dot');
      const card = item.querySelector('.timeline-card');
      
      // Animate dot
      dot.style.transform = 'scale(1.2)';
      dot.style.boxShadow = '0 0 20px currentColor';
      
      // Animate card
      card.style.transform = 'translateX(10px)';
      card.style.boxShadow = '0 8px 25px rgba(0,0,0,0.1)';
      
      // Reset after animation
      setTimeout(() => {
        dot.style.transform = 'scale(1)';
        card.style.transform = 'translateX(0)';
      }, 300);
    }

    selectItem(index) {
      // Remove previous selection
      this.items.forEach(item => {
        item.classList.remove('selected');
        const card = item.querySelector('.timeline-card');
        card.style.borderColor = '';
      });

      // Add selection to new item
      const selectedItem = this.items[index];
      selectedItem.classList.add('selected');
      const card = selectedItem.querySelector('.timeline-card');
      card.style.borderColor = 'oklch(var(--p))';
      
      this.currentIndex = index;
      
      // Scroll into view
      selectedItem.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
    }

    highlightItem(item) {
      const dot = item.querySelector('.timeline-dot');
      const card = item.querySelector('.timeline-card');
      
      dot.style.transform = 'scale(1.3)';
      card.style.borderColor = 'oklch(var(--p)/0.5)';
    }

    unhighlightItem(item) {
      if (!item.classList.contains('selected')) {
        const dot = item.querySelector('.timeline-dot');
        const card = item.querySelector('.timeline-card');
        
        dot.style.transform = 'scale(1)';
        card.style.borderColor = '';
      }
    }

    animateTimelineLine() {
      const line = document.querySelector('.timeline-line');
      if (line) {
        // Calculate total height needed
        const lastItem = this.items[this.items.length - 1];
        const totalHeight = lastItem.offsetTop + lastItem.offsetHeight - 20;
        
        line.style.height = '0px';
        line.style.transition = 'height 2s ease-out';
        
        // Animate line growth
        setTimeout(() => {
          line.style.height = `${totalHeight}px`;
        }, 500);
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new InteractiveTimeline();
  });
</script>

<style>
  .timeline-container {
    position: relative;
    overflow: hidden;
  }

  .timeline-wrapper {
    position: relative;
    padding-left: 2rem;
  }

  .timeline-line {
    z-index: 1;
  }

  .timeline-item {
    position: relative;
    z-index: 2;
    animation: timeline-item-enter 0.6s ease-out both;
  }

  .timeline-item:nth-child(1) { animation-delay: 0.1s; }
  .timeline-item:nth-child(2) { animation-delay: 0.2s; }
  .timeline-item:nth-child(3) { animation-delay: 0.3s; }
  .timeline-item:nth-child(4) { animation-delay: 0.4s; }
  .timeline-item:nth-child(5) { animation-delay: 0.5s; }
  .timeline-item:nth-child(6) { animation-delay: 0.6s; }

  @keyframes timeline-item-enter {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .timeline-dot {
    position: relative;
    z-index: 3;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .timeline-dot::before {
    content: '';
    position: absolute;
    inset: -4px;
    border-radius: 50%;
    background: linear-gradient(45deg, transparent, currentColor, transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .timeline-item:hover .timeline-dot::before {
    opacity: 0.3;
    animation: rotate 2s linear infinite;
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .timeline-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-left: 3px solid transparent;
  }

  .work-item .timeline-card {
    border-left-color: oklch(var(--p)/0.3);
  }

  .education-item .timeline-card {
    border-left-color: oklch(var(--s)/0.3);
  }

  .timeline-item.selected .timeline-card {
    transform: translateX(8px);
    box-shadow: 0 12px 30px oklch(var(--p)/0.2);
  }

  .timeline-item:hover .timeline-card {
    background: linear-gradient(135deg, oklch(var(--b1)) 0%, oklch(var(--b2)/0.3) 100%);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .timeline-wrapper {
      padding-left: 1rem;
    }
    
    .timeline-line {
      left: 1rem;
    }
    
    .timeline-dot {
      width: 0.75rem;
      height: 0.75rem;
    }
    
    .timeline-card {
      padding: 0.75rem;
    }
  }

  /* Focus states for accessibility */
  .timeline-item:focus-visible {
    outline: 2px solid oklch(var(--p));
    outline-offset: 4px;
    border-radius: 8px;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .timeline-item,
    .timeline-dot,
    .timeline-card,
    .timeline-line {
      animation: none;
      transition: none;
    }
  }
</style> 