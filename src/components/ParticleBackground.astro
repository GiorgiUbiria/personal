---
// Particle Background Component
---

<div
    id="particle-container"
    class="fixed inset-0 pointer-events-none z-0 overflow-hidden"
>
    <canvas id="particle-canvas" class="w-full h-full"></canvas>
</div>

<script>
    class ParticleSystem {
        canvas: any;
        ctx: any;
        particles: any[];
        particleCount: number;
        mouse: { x: number; y: number };
        constructor(canvas) {
            this.canvas = canvas;
            this.ctx = canvas.getContext("2d");
            this.particles = [];
            this.particleCount = 50;
            this.mouse = { x: 0, y: 0 };

            this.init();
            this.bindEvents();
            this.animate();
        }

        init() {
            this.resize();
            this.createParticles();
        }

        resize() {
            this.canvas.width = window.innerWidth;
            this.canvas.height = window.innerHeight;
        }

        createParticles() {
            this.particles = [];
            for (let i = 0; i < this.particleCount; i++) {
                this.particles.push({
                    x: Math.random() * this.canvas.width,
                    y: Math.random() * this.canvas.height,
                    size: Math.random() * 3 + 1,
                    speedX: (Math.random() - 0.5) * 0.5,
                    speedY: (Math.random() - 0.5) * 0.5,
                    opacity: Math.random() * 0.3 + 0.1,
                    shape: Math.floor(Math.random() * 3), // 0: circle, 1: triangle, 2: square
                    rotation: Math.random() * Math.PI * 2,
                    rotationSpeed: (Math.random() - 0.5) * 0.02,
                    pulsePhase: Math.random() * Math.PI * 2,
                    originalSize: 0,
                });
                this.particles[i].originalSize = this.particles[i].size;
            }
        }

        bindEvents() {
            window.addEventListener("resize", () => this.resize());

            document.addEventListener("mousemove", (e) => {
                this.mouse.x = e.clientX;
                this.mouse.y = e.clientY;
            });
        }

        drawParticle(particle) {
            this.ctx.save();
            this.ctx.globalAlpha = particle.opacity;
            this.ctx.translate(particle.x, particle.y);
            this.ctx.rotate(particle.rotation);

            // Get theme colors
            const isDark =
                document.documentElement.getAttribute("data-theme") === "black";
            const primaryColor = isDark
                ? "rgba(139, 92, 246, 0.6)"
                : "rgba(59, 130, 246, 0.6)";
            const secondaryColor = isDark
                ? "rgba(236, 72, 153, 0.4)"
                : "rgba(16, 185, 129, 0.4)";

            this.ctx.fillStyle =
                Math.random() > 0.5 ? primaryColor : secondaryColor;

            // Pulse effect
            const pulseSize =
                particle.originalSize + Math.sin(particle.pulsePhase) * 0.5;

            switch (particle.shape) {
                case 0: // Circle
                    this.ctx.beginPath();
                    this.ctx.arc(0, 0, pulseSize, 0, Math.PI * 2);
                    this.ctx.fill();
                    break;

                case 1: // Triangle
                    this.ctx.beginPath();
                    this.ctx.moveTo(0, -pulseSize);
                    this.ctx.lineTo(-pulseSize, pulseSize);
                    this.ctx.lineTo(pulseSize, pulseSize);
                    this.ctx.closePath();
                    this.ctx.fill();
                    break;

                case 2: // Square
                    this.ctx.fillRect(
                        -pulseSize,
                        -pulseSize,
                        pulseSize * 2,
                        pulseSize * 2,
                    );
                    break;
            }

            this.ctx.restore();
        }

        updateParticle(particle) {
            // Mouse interaction
            const dx = this.mouse.x - particle.x;
            const dy = this.mouse.y - particle.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < 100) {
                const force = (100 - distance) / 100;
                particle.x -= (dx / distance) * force * 0.5;
                particle.y -= (dy / distance) * force * 0.5;
            }

            // Update position
            particle.x += particle.speedX;
            particle.y += particle.speedY;

            // Update rotation and pulse
            particle.rotation += particle.rotationSpeed;
            particle.pulsePhase += 0.02;

            // Boundary wrapping
            if (particle.x < -10) particle.x = this.canvas.width + 10;
            if (particle.x > this.canvas.width + 10) particle.x = -10;
            if (particle.y < -10) particle.y = this.canvas.height + 10;
            if (particle.y > this.canvas.height + 10) particle.y = -10;
        }

        drawConnections() {
            this.ctx.strokeStyle = "rgba(139, 92, 246, 0.1)";
            this.ctx.lineWidth = 1;

            for (let i = 0; i < this.particles.length; i++) {
                for (let j = i + 1; j < this.particles.length; j++) {
                    const dx = this.particles[i].x - this.particles[j].x;
                    const dy = this.particles[i].y - this.particles[j].y;
                    const distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < 120) {
                        this.ctx.globalAlpha = ((120 - distance) / 120) * 0.2;
                        this.ctx.beginPath();
                        this.ctx.moveTo(
                            this.particles[i].x,
                            this.particles[i].y,
                        );
                        this.ctx.lineTo(
                            this.particles[j].x,
                            this.particles[j].y,
                        );
                        this.ctx.stroke();
                    }
                }
            }
            this.ctx.globalAlpha = 1;
        }

        animate() {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

            // Draw connections first
            this.drawConnections();

            // Update and draw particles
            this.particles.forEach((particle) => {
                this.updateParticle(particle);
                this.drawParticle(particle);
            });

            requestAnimationFrame(() => this.animate());
        }
    }

    // Initialize particle system when DOM is loaded
    document.addEventListener("DOMContentLoaded", () => {
        const canvas = document.getElementById("particle-canvas");
        if (canvas) {
            new ParticleSystem(canvas);
        }
    });
</script>

<style>
    #particle-container {
        opacity: 0.7;
        transition: opacity 0.3s ease;
    }

    /* Reduce particles on mobile for performance */
    @media (max-width: 768px) {
        #particle-container {
            opacity: 0.4;
        }
    }

    /* Respect reduced motion preferences */
    @media (prefers-reduced-motion: reduce) {
        #particle-container {
            display: none;
        }
    }
</style>

