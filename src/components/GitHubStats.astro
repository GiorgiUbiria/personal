---
// Enhanced GitHub Stats Component with Real Data
const username = "GiorgiUbiria";
---

<div class="github-stats-container card card-compact card-bordered border border-[oklch(var(--s))] w-full hover:shadow-xl transition-all duration-300 my-4">
  <div class="card-body">
    <h3 class="card-title text-lg font-bold mb-4 flex items-center">
      <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
      </svg>
      GitHub Activity
    </h3>
    
    <div id="github-stats" class="grid grid-cols-2 md:grid-cols-4 gap-4">
      <!-- Loading state -->
      <div class="stat-item loading">
        <div class="stat-value skeleton-line h-8 bg-base-300 rounded"></div>
        <div class="stat-label skeleton-line h-4 bg-base-300 rounded mt-2"></div>
      </div>
      <div class="stat-item loading">
        <div class="stat-value skeleton-line h-8 bg-base-300 rounded"></div>
        <div class="stat-label skeleton-line h-4 bg-base-300 rounded mt-2"></div>
      </div>
      <div class="stat-item loading">
        <div class="stat-value skeleton-line h-8 bg-base-300 rounded"></div>
        <div class="stat-label skeleton-line h-4 bg-base-300 rounded mt-2"></div>
      </div>
      <div class="stat-item loading">
        <div class="stat-value skeleton-line h-8 bg-base-300 rounded"></div>
        <div class="stat-label skeleton-line h-4 bg-base-300 rounded mt-2"></div>
      </div>
    </div>

    <!-- Contribution Activity -->
    <div id="contribution-activity" class="mt-6">
      <h4 class="font-semibold mb-3 text-sm uppercase tracking-wide">Recent Activity</h4>
      <div class="activity-grid grid grid-cols-7 gap-1 mb-4">
        <!-- Loading state for contribution graph -->
        <div class="contribution-day skeleton-line h-3 w-3 bg-base-300 rounded-sm"></div>
        <div class="contribution-day skeleton-line h-3 w-3 bg-base-300 rounded-sm"></div>
        <div class="contribution-day skeleton-line h-3 w-3 bg-base-300 rounded-sm"></div>
        <div class="contribution-day skeleton-line h-3 w-3 bg-base-300 rounded-sm"></div>
        <div class="contribution-day skeleton-line h-3 w-3 bg-base-300 rounded-sm"></div>
        <div class="contribution-day skeleton-line h-3 w-3 bg-base-300 rounded-sm"></div>
        <div class="contribution-day skeleton-line h-3 w-3 bg-base-300 rounded-sm"></div>
      </div>
      <div class="activity-summary text-xs text-secondary">
        <span id="total-contributions">Loading...</span> contributions in the last year
      </div>
    </div>

    <div id="language-stats" class="mt-6">
      <h4 class="font-semibold mb-3 text-sm uppercase tracking-wide">Top Languages</h4>
      <div class="language-bars space-y-2">
        <!-- Loading state for languages -->
        <div class="language-bar loading">
          <div class="skeleton-line h-4 bg-base-300 rounded"></div>
        </div>
        <div class="language-bar loading">
          <div class="skeleton-line h-4 bg-base-300 rounded w-4/5"></div>
        </div>
        <div class="language-bar loading">
          <div class="skeleton-line h-4 bg-base-300 rounded w-3/5"></div>
        </div>
      </div>
    </div>

    <!-- Recent Repositories -->
    <div id="recent-repos" class="mt-6">
      <h4 class="font-semibold mb-3 text-sm uppercase tracking-wide">Recent Repositories</h4>
      <div class="repos-list space-y-2">
        <!-- Loading state -->
        <div class="repo-item loading bg-base-200/50 rounded-lg p-3">
          <div class="skeleton-line h-4 bg-base-300 rounded mb-2"></div>
          <div class="skeleton-line h-3 bg-base-300 rounded w-3/4"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ username }}>
  class EnhancedGitHubStats {
    constructor(username) {
      this.username = username;
      this.cache = new Map();
      this.cacheExpiry = 10 * 60 * 1000; // 10 minutes
      this.rateLimitRemaining = 60;
      this.rateLimitReset = 0;
      this.init();
    }

    async init() {
      try {
        await this.checkRateLimit();
        await Promise.all([
          this.loadUserStats(),
          this.loadLanguageStats(),
          this.loadContributionActivity(),
          this.loadRecentRepos()
        ]);
      } catch (error) {
        console.error('Failed to load GitHub stats:', error);
        this.showError(error.message);
      }
    }

    async checkRateLimit() {
      try {
        const response = await fetch('https://api.github.com/rate_limit');
        if (response.ok) {
          const data = await response.json();
          this.rateLimitRemaining = data.rate.remaining;
          this.rateLimitReset = data.rate.reset;
        }
      } catch (error) {
        console.warn('Could not check rate limit:', error);
      }
    }

    async fetchWithCache(url, options = {}) {
      const cacheKey = url + JSON.stringify(options);
      const cached = this.cache.get(cacheKey);
      
      if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
        return cached.data;
      }

      // Check rate limit
      if (this.rateLimitRemaining <= 1 && Date.now() / 1000 < this.rateLimitReset) {
        throw new Error('GitHub API rate limit exceeded. Please try again later.');
      }

      const response = await fetch(url, {
        headers: {
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Portfolio-Website',
          ...options.headers
        },
        ...options
      });

      // Update rate limit info
      this.rateLimitRemaining = parseInt(response.headers.get('X-RateLimit-Remaining') || '0');
      this.rateLimitReset = parseInt(response.headers.get('X-RateLimit-Reset') || '0');

      if (!response.ok) {
        if (response.status === 403) {
          throw new Error('GitHub API rate limit exceeded');
        }
        throw new Error(`GitHub API error: ${response.status}`);
      }
      
      const data = await response.json();
      this.cache.set(cacheKey, { data, timestamp: Date.now() });
      return data;
    }

    async loadUserStats() {
      const userUrl = `https://api.github.com/users/${this.username}`;
      const reposUrl = `https://api.github.com/users/${this.username}/repos?per_page=100&sort=updated`;
      
      const [userData, reposData] = await Promise.all([
        this.fetchWithCache(userUrl),
        this.fetchWithCache(reposUrl)
      ]);

      // Calculate comprehensive stats
      const totalStars = reposData.reduce((sum, repo) => sum + repo.stargazers_count, 0);
      const totalForks = reposData.reduce((sum, repo) => sum + repo.forks_count, 0);
      const totalWatchers = reposData.reduce((sum, repo) => sum + repo.watchers_count, 0);
      
      // Calculate recent activity (repos updated in last 30 days)
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      const recentRepos = reposData.filter(repo => 
        new Date(repo.updated_at) > thirtyDaysAgo
      ).length;

      this.renderStats({
        repos: userData.public_repos,
        followers: userData.followers,
        stars: totalStars,
        forks: totalForks,
        watchers: totalWatchers,
        recentActivity: recentRepos
      });
    }

    async loadLanguageStats() {
      const reposUrl = `https://api.github.com/users/${this.username}/repos?per_page=100`;
      const repos = await this.fetchWithCache(reposUrl);
      
      const languageStats = {};
      const languageBytes = {};
      
      // Get detailed language data for each repo
      const languagePromises = repos
        .filter(repo => !repo.fork && repo.size > 0) // Exclude forks and empty repos
        .slice(0, 30) // Limit to avoid rate limiting
        .map(async (repo) => {
          try {
            const langUrl = `https://api.github.com/repos/${this.username}/${repo.name}/languages`;
            const languages = await this.fetchWithCache(langUrl);
            
            Object.entries(languages).forEach(([lang, bytes]) => {
              languageStats[lang] = (languageStats[lang] || 0) + 1;
              languageBytes[lang] = (languageBytes[lang] || 0) + bytes;
            });
          } catch (error) {
            // If we can't get language data for a repo, use the primary language
            if (repo.language) {
              languageStats[repo.language] = (languageStats[repo.language] || 0) + 1;
              languageBytes[repo.language] = (languageBytes[repo.language] || 0) + (repo.size * 1024);
            }
          }
        });

      await Promise.all(languagePromises);
      this.renderLanguages(languageStats, languageBytes);
    }

    async loadContributionActivity() {
      try {
        // Note: GitHub's contribution graph data is not available via public API
        // We'll simulate it based on recent commit activity
        const eventsUrl = `https://api.github.com/users/${this.username}/events/public?per_page=100`;
        const events = await this.fetchWithCache(eventsUrl);
        
        const contributionData = this.processContributionData(events);
        this.renderContributionActivity(contributionData);
      } catch (error) {
        console.warn('Could not load contribution activity:', error);
        this.renderContributionActivity({ totalContributions: 0, dailyContributions: [] });
      }
    }

    processContributionData(events) {
      const contributions = {};
      let totalContributions = 0;

      // Process events from the last year
      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

      events.forEach(event => {
        const eventDate = new Date(event.created_at);
        if (eventDate > oneYearAgo) {
          const dateKey = eventDate.toISOString().split('T')[0];
          
          // Count different types of contributions
          if (['PushEvent', 'CreateEvent', 'PullRequestEvent', 'IssuesEvent'].includes(event.type)) {
            contributions[dateKey] = (contributions[dateKey] || 0) + 1;
            totalContributions++;
          }
        }
      });

      // Generate daily contribution data for the last 365 days
      const dailyContributions = [];
      for (let i = 364; i >= 0; i--) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        const dateKey = date.toISOString().split('T')[0];
        dailyContributions.push({
          date: dateKey,
          count: contributions[dateKey] || 0
        });
      }

      return { totalContributions, dailyContributions };
    }

    async loadRecentRepos() {
      const reposUrl = `https://api.github.com/users/${this.username}/repos?per_page=6&sort=updated&type=owner`;
      const repos = await this.fetchWithCache(reposUrl);
      
      this.renderRecentRepos(repos);
    }

    renderStats(stats) {
      const container = document.getElementById('github-stats');
      if (!container) return;

      container.innerHTML = `
        <div class="stat-item">
          <div class="stat-value text-2xl font-bold text-primary animate-count" data-target="${stats.repos}">0</div>
          <div class="stat-label text-xs text-secondary uppercase tracking-wide">Repositories</div>
        </div>
        <div class="stat-item">
          <div class="stat-value text-2xl font-bold text-primary animate-count" data-target="${stats.followers}">0</div>
          <div class="stat-label text-xs text-secondary uppercase tracking-wide">Followers</div>
        </div>
        <div class="stat-item">
          <div class="stat-value text-2xl font-bold text-primary animate-count" data-target="${stats.stars}">0</div>
          <div class="stat-label text-xs text-secondary uppercase tracking-wide">Stars</div>
        </div>
        <div class="stat-item">
          <div class="stat-value text-2xl font-bold text-primary animate-count" data-target="${stats.forks}">0</div>
          <div class="stat-label text-xs text-secondary uppercase tracking-wide">Forks</div>
        </div>
      `;

      this.animateCounters();
    }

    renderLanguages(languageStats, languageBytes) {
      const container = document.getElementById('language-stats');
      if (!container) return;

      // Sort by bytes (more accurate than repo count)
      const sortedLanguages = Object.entries(languageBytes)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);

      const totalBytes = Object.values(languageBytes).reduce((sum, bytes) => sum + bytes, 0);
      
      const colors = {
        'JavaScript': '#f1e05a',
        'TypeScript': '#2b7489',
        'Python': '#3572A5',
        'Go': '#00ADD8',
        'PHP': '#4F5D95',
        'Java': '#b07219',
        'C#': '#239120',
        'HTML': '#e34c26',
        'CSS': '#1572B6',
        'Vue': '#4FC08D',
        'React': '#61DAFB',
        'C++': '#f34b7d',
        'C': '#555555',
        'Shell': '#89e051',
        'Dockerfile': '#384d54'
      };

      const languageBars = sortedLanguages.map(([language, bytes]) => {
        const percentage = ((bytes / totalBytes) * 100).toFixed(1);
        const color = colors[language] || '#6b7280';
        const repoCount = languageStats[language] || 0;
        
        return `
          <div class="language-bar">
            <div class="flex justify-between items-center mb-1">
              <span class="text-sm font-medium">${language}</span>
              <span class="text-xs text-secondary">${percentage}% (${repoCount} repos)</span>
            </div>
            <div class="w-full bg-base-300 rounded-full h-2">
              <div class="h-2 rounded-full transition-all duration-1000 ease-out animate-width" 
                   style="background-color: ${color}; width: ${percentage}%"></div>
            </div>
          </div>
        `;
      }).join('');

      container.querySelector('.language-bars').innerHTML = languageBars;
    }

    renderContributionActivity(contributionData) {
      const container = document.getElementById('contribution-activity');
      if (!container) return;

      const { totalContributions, dailyContributions } = contributionData;

      // Render contribution graph (last 7 weeks)
      const activityGrid = container.querySelector('.activity-grid');
      const last49Days = dailyContributions.slice(-49);
      
      activityGrid.innerHTML = last49Days.map(day => {
        const intensity = Math.min(day.count, 4); // Cap at 4 for color intensity
        const opacity = intensity === 0 ? 0.1 : 0.2 + (intensity * 0.2);
        
        return `
          <div class="contribution-day w-3 h-3 rounded-sm bg-primary transition-all duration-300 hover:scale-110" 
               style="opacity: ${opacity}" 
               title="${day.date}: ${day.count} contributions">
          </div>
        `;
      }).join('');

      // Update total contributions
      const totalElement = document.getElementById('total-contributions');
      if (totalElement) {
        totalElement.textContent = totalContributions.toLocaleString();
      }
    }

    renderRecentRepos(repos) {
      const container = document.getElementById('recent-repos');
      if (!container) return;

      const reposList = container.querySelector('.repos-list');
      
      reposList.innerHTML = repos.slice(0, 3).map(repo => {
        const updatedAt = new Date(repo.updated_at);
        const timeAgo = this.getTimeAgo(updatedAt);
        
        return `
          <div class="repo-item bg-base-200/50 rounded-lg p-3 hover:bg-base-200/70 transition-all duration-300">
            <div class="flex justify-between items-start mb-2">
              <a href="${repo.html_url}" target="_blank" rel="noopener noreferrer" 
                 class="font-medium text-primary hover:text-primary-focus transition-colors">
                ${repo.name}
              </a>
              <div class="flex items-center space-x-2 text-xs text-secondary">
                ${repo.stargazers_count > 0 ? `
                  <span class="flex items-center">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    </svg>
                    ${repo.stargazers_count}
                  </span>
                ` : ''}
                ${repo.language ? `<span class="language-tag">${repo.language}</span>` : ''}
              </div>
            </div>
            <p class="text-xs text-secondary mb-2 line-clamp-2">
              ${repo.description || 'No description available'}
            </p>
            <div class="text-xs text-secondary">
              Updated ${timeAgo}
            </div>
          </div>
        `;
      }).join('');
    }

    getTimeAgo(date) {
      const now = new Date();
      const diff = now - date;
      const days = Math.floor(diff / (1000 * 60 * 60 * 24));
      const hours = Math.floor(diff / (1000 * 60 * 60));
      const minutes = Math.floor(diff / (1000 * 60));

      if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
      if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
      if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
      return 'Just now';
    }

    animateCounters() {
      const counters = document.querySelectorAll('.animate-count');
      
      counters.forEach(counter => {
        const target = parseInt(counter.getAttribute('data-target'));
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;

        const timer = setInterval(() => {
          current += step;
          if (current >= target) {
            counter.textContent = target.toLocaleString();
            clearInterval(timer);
          } else {
            counter.textContent = Math.floor(current).toLocaleString();
          }
        }, 16);
      });
    }

    showError(message) {
      const container = document.getElementById('github-stats');
      if (container) {
        container.innerHTML = `
          <div class="col-span-full text-center py-4">
            <p class="text-error mb-2">Failed to load GitHub stats</p>
            <p class="text-xs text-secondary mb-3">${message}</p>
            <button onclick="location.reload()" class="btn btn-sm btn-outline">Retry</button>
          </div>
        `;
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new EnhancedGitHubStats(username);
  });
</script>

<style>
  .stat-item {
    text-align: center;
    padding: 1rem;
    border-radius: 0.5rem;
    background: linear-gradient(135deg, oklch(var(--b1)) 0%, oklch(var(--b2)/0.5) 100%);
    transition: all 0.3s ease;
  }

  .stat-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px oklch(var(--s)/0.2);
  }

  .language-bar {
    transition: all 0.3s ease;
  }

  .language-bar:hover {
    transform: translateX(4px);
  }

  .animate-width {
    animation: width-grow 1.5s ease-out;
  }

  @keyframes width-grow {
    from {
      width: 0% !important;
    }
  }

  .skeleton-line {
    background: linear-gradient(90deg, 
      oklch(var(--b3)) 25%, 
      oklch(var(--b2)) 50%, 
      oklch(var(--b3)) 75%
    );
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  .loading .skeleton-line {
    animation: shimmer 1.5s infinite;
  }

  .contribution-day {
    cursor: pointer;
  }

  .activity-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 2px;
  }

  .repo-item {
    border: 1px solid transparent;
  }

  .repo-item:hover {
    border-color: oklch(var(--p)/0.3);
  }

  .language-tag {
    background: oklch(var(--p)/0.1);
    color: oklch(var(--p));
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 10px;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .stat-item {
      padding: 0.75rem;
    }
    
    .stat-value {
      font-size: 1.25rem;
    }

    .activity-grid {
      gap: 1px;
    }

    .contribution-day {
      width: 10px;
      height: 10px;
    }
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .stat-item,
    .language-bar,
    .animate-width,
    .skeleton-line,
    .contribution-day {
      animation: none;
      transition: none;
    }
  }
</style> 