---
// GitHub Stats Component
const username = "GiorgiUbiria";
---

<div class="github-stats-container card card-compact card-bordered border border-[oklch(var(--s))] w-full hover:shadow-xl transition-all duration-300 my-4">
  <div class="card-body">
    <h3 class="card-title text-lg font-bold mb-4 flex items-center">
      <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
      </svg>
      GitHub Activity
    </h3>
    
    <div id="github-stats" class="grid grid-cols-2 md:grid-cols-4 gap-4">
      <!-- Loading state -->
      <div class="stat-item loading">
        <div class="stat-value skeleton-line h-8 bg-base-300 rounded"></div>
        <div class="stat-label skeleton-line h-4 bg-base-300 rounded mt-2"></div>
      </div>
      <div class="stat-item loading">
        <div class="stat-value skeleton-line h-8 bg-base-300 rounded"></div>
        <div class="stat-label skeleton-line h-4 bg-base-300 rounded mt-2"></div>
      </div>
      <div class="stat-item loading">
        <div class="stat-value skeleton-line h-8 bg-base-300 rounded"></div>
        <div class="stat-label skeleton-line h-4 bg-base-300 rounded mt-2"></div>
      </div>
      <div class="stat-item loading">
        <div class="stat-value skeleton-line h-8 bg-base-300 rounded"></div>
        <div class="stat-label skeleton-line h-4 bg-base-300 rounded mt-2"></div>
      </div>
    </div>

    <div id="language-stats" class="mt-6">
      <h4 class="font-semibold mb-3 text-sm uppercase tracking-wide">Top Languages</h4>
      <div class="language-bars space-y-2">
        <!-- Loading state for languages -->
        <div class="language-bar loading">
          <div class="skeleton-line h-4 bg-base-300 rounded"></div>
        </div>
        <div class="language-bar loading">
          <div class="skeleton-line h-4 bg-base-300 rounded w-4/5"></div>
        </div>
        <div class="language-bar loading">
          <div class="skeleton-line h-4 bg-base-300 rounded w-3/5"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ username }}>
  class GitHubStatsWidget {
    constructor(username) {
      this.username = username;
      this.cache = new Map();
      this.cacheExpiry = 5 * 60 * 1000; // 5 minutes
      this.init();
    }

    async init() {
      try {
        await this.loadStats();
        await this.loadLanguages();
      } catch (error) {
        console.error('Failed to load GitHub stats:', error);
        this.showError();
      }
    }

    async fetchWithCache(url) {
      const cached = this.cache.get(url);
      if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
        return cached.data;
      }

      const response = await fetch(url);
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      
      const data = await response.json();
      this.cache.set(url, { data, timestamp: Date.now() });
      return data;
    }

    async loadStats() {
      const userUrl = `https://api.github.com/users/${this.username}`;
      const reposUrl = `https://api.github.com/users/${this.username}/repos?per_page=100`;
      
      const [userData, reposData] = await Promise.all([
        this.fetchWithCache(userUrl),
        this.fetchWithCache(reposUrl)
      ]);

      const totalStars = reposData.reduce((sum, repo) => sum + repo.stargazers_count, 0);
      const totalForks = reposData.reduce((sum, repo) => sum + repo.forks_count, 0);

      this.renderStats({
        repos: userData.public_repos,
        followers: userData.followers,
        stars: totalStars,
        forks: totalForks
      });
    }

    async loadLanguages() {
      const reposUrl = `https://api.github.com/users/${this.username}/repos?per_page=100`;
      const repos = await this.fetchWithCache(reposUrl);
      
      const languageStats = {};
      
      // Get language data for each repo
      for (const repo of repos.slice(0, 20)) { // Limit to avoid rate limiting
        if (repo.language) {
          languageStats[repo.language] = (languageStats[repo.language] || 0) + 1;
        }
      }

      this.renderLanguages(languageStats);
    }

    renderStats(stats) {
      const container = document.getElementById('github-stats');
      if (!container) return;

      container.innerHTML = `
        <div class="stat-item">
          <div class="stat-value text-2xl font-bold text-primary animate-count" data-target="${stats.repos}">0</div>
          <div class="stat-label text-xs text-secondary uppercase tracking-wide">Repositories</div>
        </div>
        <div class="stat-item">
          <div class="stat-value text-2xl font-bold text-primary animate-count" data-target="${stats.followers}">0</div>
          <div class="stat-label text-xs text-secondary uppercase tracking-wide">Followers</div>
        </div>
        <div class="stat-item">
          <div class="stat-value text-2xl font-bold text-primary animate-count" data-target="${stats.stars}">0</div>
          <div class="stat-label text-xs text-secondary uppercase tracking-wide">Stars</div>
        </div>
        <div class="stat-item">
          <div class="stat-value text-2xl font-bold text-primary animate-count" data-target="${stats.forks}">0</div>
          <div class="stat-label text-xs text-secondary uppercase tracking-wide">Forks</div>
        </div>
      `;

      this.animateCounters();
    }

    renderLanguages(languageStats) {
      const container = document.getElementById('language-stats');
      if (!container) return;

      const sortedLanguages = Object.entries(languageStats)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);

      const total = Object.values(languageStats).reduce((sum, count) => sum + count, 0);
      const colors = {
        'JavaScript': '#f1e05a',
        'TypeScript': '#2b7489',
        'Python': '#3572A5',
        'Go': '#00ADD8',
        'PHP': '#4F5D95',
        'Java': '#b07219',
        'C#': '#239120',
        'HTML': '#e34c26',
        'CSS': '#1572B6',
        'Vue': '#4FC08D',
        'React': '#61DAFB'
      };

      const languageBars = sortedLanguages.map(([language, count]) => {
        const percentage = ((count / total) * 100).toFixed(1);
        const color = colors[language] || '#6b7280';
        
        return `
          <div class="language-bar">
            <div class="flex justify-between items-center mb-1">
              <span class="text-sm font-medium">${language}</span>
              <span class="text-xs text-secondary">${percentage}%</span>
            </div>
            <div class="w-full bg-base-300 rounded-full h-2">
              <div class="h-2 rounded-full transition-all duration-1000 ease-out animate-width" 
                   style="background-color: ${color}; width: ${percentage}%"></div>
            </div>
          </div>
        `;
      }).join('');

      container.querySelector('.language-bars').innerHTML = languageBars;
    }

    animateCounters() {
      const counters = document.querySelectorAll('.animate-count');
      
      counters.forEach(counter => {
        const target = parseInt(counter.getAttribute('data-target'));
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;

        const timer = setInterval(() => {
          current += step;
          if (current >= target) {
            counter.textContent = target.toLocaleString();
            clearInterval(timer);
          } else {
            counter.textContent = Math.floor(current).toLocaleString();
          }
        }, 16);
      });
    }

    showError() {
      const container = document.getElementById('github-stats');
      if (container) {
        container.innerHTML = `
          <div class="col-span-full text-center py-4">
            <p class="text-error">Failed to load GitHub stats</p>
            <button onclick="location.reload()" class="btn btn-sm btn-outline mt-2">Retry</button>
          </div>
        `;
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new GitHubStatsWidget(username);
  });
</script>

<style>
  .stat-item {
    text-align: center;
    padding: 1rem;
    border-radius: 0.5rem;
    background: linear-gradient(135deg, oklch(var(--b1)) 0%, oklch(var(--b2)/0.5) 100%);
    transition: all 0.3s ease;
  }

  .stat-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px oklch(var(--s)/0.2);
  }

  .language-bar {
    transition: all 0.3s ease;
  }

  .language-bar:hover {
    transform: translateX(4px);
  }

  .animate-width {
    animation: width-grow 1.5s ease-out;
  }

  @keyframes width-grow {
    from {
      width: 0% !important;
    }
  }

  .skeleton-line {
    background: linear-gradient(90deg, 
      oklch(var(--b3)) 25%, 
      oklch(var(--b2)) 50%, 
      oklch(var(--b3)) 75%
    );
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  .loading .skeleton-line {
    animation: shimmer 1.5s infinite;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .stat-item {
      padding: 0.75rem;
    }
    
    .stat-value {
      font-size: 1.25rem;
    }
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .stat-item,
    .language-bar,
    .animate-width,
    .skeleton-line {
      animation: none;
      transition: none;
    }
  }
</style> 